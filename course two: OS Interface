Knowledge：接口/Interface ：是操作系统提供给外界访问的入口。

    接口要达到的效果：
     
        one、用户程序不应该直接访问操作系统内部的内存。
       
        two、操作系统实现了不让进去直接访问的方式。即在操作系统初始化的阶段，就将内存段分为了：内核段和用户段/内核态、用户态，依赖于其对应的DPL、CPL，根据 DPL和 CPL两者的值来判断用户程序是否可以直接访问操作系统内部内存。
       
        three、既然不能直接访问，操作系统应当提供外部程序访问内部内存的方式。
       


Question 

      one：用户程序为什么不能直接访问操作系统内部的内存和逻辑？

      Answer:是为了保证操作系统内部的相对稳定和安全。若不这么做的话，当操作系统上层程序员写的软件应用如果存在恶意攻击操作系统时，会导致操作系统的不安全运行。为了解决这一问题，操作系统的设计者提出了封装操作系统内部的逻辑操作，不对外展示，只对外提供相对应操作的接口，此操作是使用硬件的方式来实现的。


      two：操作系统如何实现了不让进去直接访问的方式？即操作系统是如何在初始化阶段划分了对应的内核态和用户态？是如何将相对应的内存划分了对应的内核段和用户段？？

     Answer：因为无论是外部数据或是操作系统内部数据皆是存放在硬盘或者加载到内存中的，在系统初始化的时候，也就是head.s执行的时候，会针对内核态的数据和代码建立GDT表项，其表中对应的 DPL 已初始化为0。在系统初始化结束后，
     
会进入到用户态执行，进入到用户态后会启动shell程序进而启动执行对应的用户程序，而此时用户程序的 CS:IP 中的 CPL 就初始化置为3，CPL是放在CS段寄存器中的。 当程序执行到需要调用操作系统的函数后，操作系统此时会比较CPL和DPL
     
两者值的大小，发现此时的 CPL=3 > DPL=0, 直接进行阻断，从而达到禁止用户程序直接访问操作系统的内部内存。
     
     
     three：操作系统是如何实现对外提供访问的方式？
     
     Answer：硬件提供了“主动进入内核的方法”，即中断机制。
           
       I、对于Inter x86,即 int指令。int指令将使CS中的 CPL 改成0，达到“进入内核”方式，是用户程序发起的调用内核代码的唯一方式。
       
       II、系统调用的核心：
               
               (1)、用户程序中包含一段包含int指令的代码。此代码是由c语言的库函数所做的。
               
               (2)、操作系统写中断处理，获取想调程序的编号。

               (3)、操作系统根据编号执行相应的代码。
